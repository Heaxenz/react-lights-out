{"ast":null,"code":"var _jsxFileName = \"/Users/heaxenz/School/section-26/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  . \n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  function random() {\n    let choice = Math.floor(Math.random() * 2) + 1;\n    if (choice === 1) {\n      return 't';\n    } else return 'f';\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return Array.from({\n      length: nrows\n    }).map(row => Array.from({\n      length: ncols\n    }).map(cell => Math.random() < chanceLightStartsOn));\n\n    // TODO: create array-of-arrays of true/false values\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"You Win!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  }\n\n  // make table board\n\n  let tblBoard = [];\n\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","random","choice","Math","floor","Array","from","length","map","row","cell","hasWon","every","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","_c","$RefreshReg$"],"sources":["/Users/heaxenz/School/section-26/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  . \n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn  = 0.25}) {\n  const [board, setBoard] = useState(createBoard());\n\n  function random() {\n    let choice = Math.floor(Math.random() * 2) + 1\n    if(choice === 1) {\n      return 't'\n    } else return 'f'\n  }\n\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return Array.from({length: nrows}).map(\n      row => Array.from({length: ncols}).map(\n        cell => Math.random() < chanceLightStartsOn))\n    \n    \n\n    // TODO: create array-of-arrays of true/false values\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell))\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()){\n    return <h1>You Win!!</h1>\n  }\n\n  // make table board\n\n  let tblBoard = [];\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}